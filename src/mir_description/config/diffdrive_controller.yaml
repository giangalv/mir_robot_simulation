##
# @file diffdrive_controller.yaml
# @brief Configuration file for the differential drive controller of the MiR robot.
#
# This file contains the parameters for the controller manager, differential drive controller,
# and joint state broadcaster. It also includes commented-out configurations for a UR5 joint
# trajectory controller.

##
# @brief Controller manager configuration
controller_manager:
  ros__parameters:
    update_rate: 30 #41.2 #100 ## @param update_rate Controller update rate in Hz
    use_sim_time: false ## @param use_sim_time Use simulation time

    ## @brief Differential drive controller
    diff_cont:
      type: diff_drive_controller/DiffDriveController

    ## @brief Joint state broadcaster
    joint_broadcaster:
      type: joint_state_broadcaster/JointStateBroadcaster

    # UR5 joint trajectory controller
    #joint_trajectory_controller:
    #  type: joint_trajectory_controller/JointTrajectoryController

##
# @brief Differential drive controller configuration
diff_cont:
  ros__parameters:
    #type: "diff_drive_controller/DiffDriveController"

    ## @param left_wheel_names Names of the left wheel joints
    left_wheel_names  : ["left_wheel_joint"] #['${prefix}left_wheel_joint'] #'$(arg prefix)left_wheel_joint'    ##------------------ CHECK SYNTAX FOR XML AND YAML

    ## @param right_wheel_names Names of the right wheel joints
    right_wheel_names : ["right_wheel_joint"] #['${prefix}right_wheel_joint'] #'$(arg prefix)right_wheel_joint'

    ## @param publish_rate Rate at which to publish odometry information 
    publish_rate: 41.2  # this is what the real MiR platform publishes (default: 50)

    ## @param pose_covariance_diagonal Covariance values for pose estimation, exactly what the real MiR platform publishes
    pose_covariance_diagonal : [0.00001, 0.00001, 1000000.0, 1000000.0, 1000000.0, 1000.0]

    ## @param twist_covariance_diagonal Covariance values for twist estimation, exactly what the real MiR platform publishes
    twist_covariance_diagonal: [0.1, 0.1, 1000000.0, 1000000.0, 1000000.0, 1000.0]

    ## @param enable_odom_tf Whether to publish the odometry transform
    enable_odom_tf: true

    # Wheel separation and diameter. These are both optional.
    # diff_drive_controller will attempt to read either one or both from the URDF if not specified as a parameter

    ## @param wheel_separation Distance between the wheels
    wheel_separation : 0.445208 #0.403   #0.445208

    ## @param wheel_radius Radius of the wheels
    wheel_radius : 0.100   #0.0625

    ## @param wheel_separation_multiplier Multiplier for wheel separation
    wheel_separation_multiplier: 1.0 # default: 1.0

    ## @param wheel_radius_multiplier Multiplier for wheel radius
    wheel_radius_multiplier    : 1.0 # default: 1.0

    ## @param cmd_vel_timeout Timeout for velocity commands
    cmd_vel_timeout: 0.5 # in seconds

    ## @param use_stamped_vel Whether to use stamped velocity messages
    use_stamped_vel: false

    ## @param base_frame_id Frame ID for the robot base
    base_frame_id: base_footprint #$(arg prefix)base_footprint # default: base_link

    ## @param odom_frame_id Frame ID for the odometry
    odom_frame_id: odom      # default: odom

    # Velocity and acceleration limits
    # Whenever a min_* is unspecified, default to -max_*
    ## @brief Linear velocity limits
    linear:
      x:
        has_velocity_limits: true
        max_velocity: 1.0  # m/s; move_base max_vel_x: 0.8
        has_acceleration_limits: true
        max_acceleration: 2.0  # m/s^2; move_base acc_lim_x: 1.5

    ## @brief Angular velocity limits    
    angular:
      z:
        has_velocity_limits: true
        max_velocity: 1.5  # rad/s; move_base max_rot_vel: 1.0
        has_acceleration_limits: true
        max_acceleration: 2.5  # rad/s^2; move_base acc_lim_th: 2.0

#joint_broadcaster:
#  type: position_controllers/JointGroupPositionController

#joint_trajectory_controller:
#  ros__parameters:
#    joints:
#      - ur_shoulder_pan_joint
#      - ur_shoulder_lift_joint
#      - ur_elbow_joint
#      - ur_wrist_1_joint
#      - ur_wrist_2_joint
#      - ur_wrist_3_joint
#    command_interfaces:
#      - position
#    state_interfaces:
#     - position
#      - velocity
#    state_publish_rate: 100.0
#    action_monitor_rate: 20.0
#    allow_partial_joints_goal: false
#    constraints:
#      stopped_velocity_tolerance: 0.2
#      goal_time: 0.0
#      ur_shoulder_pan_joint: { trajectory: 0.2, goal: 0.1 }
#      ur_shoulder_lift_joint: { trajectory: 0.2, goal: 0.1 }
#      ur_elbow_joint: { trajectory: 0.2, goal: 0.1 }
#      ur_wrist_1_joint: { trajectory: 0.2, goal: 0.1 }
#      ur_wrist_2_joint: { trajectory: 0.2, goal: 0.1 }
#      ur_wrist_3_joint: { trajectory: 0.2, goal: 0.1 }